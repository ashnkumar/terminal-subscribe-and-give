"use strict";
exports.__esModule = true;
exports.V1TransactionsApi = void 0;
var tslib_1 = require("tslib");
var v1CreateRefundRequest_1 = require("../models/v1CreateRefundRequest");
var v1Order_1 = require("../models/v1Order");
var v1Payment_1 = require("../models/v1Payment");
var v1Refund_1 = require("../models/v1Refund");
var v1Settlement_1 = require("../models/v1Settlement");
var v1UpdateOrderRequest_1 = require("../models/v1UpdateOrderRequest");
var schema_1 = require("../schema");
var baseApi_1 = require("./baseApi");
var V1TransactionsApi = /** @class */ (function (_super) {
    tslib_1.__extends(V1TransactionsApi, _super);
    function V1TransactionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Provides summary information for a merchant's online store orders.
     *
     * @param locationId  The ID of the location to list online store orders for.
     * @param order       The order in which payments are listed in the response.
     * @param limit       The maximum number of payments to return in a single response. This value cannot
     *                              exceed 200.
     * @param batchToken  A pagination cursor to retrieve the next set of results for your original query to
     *                              the endpoint.
     * @return Response from the API call
     * @deprecated
     */
    V1TransactionsApi.prototype.v1ListOrders = function (locationId, order, limit, batchToken, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    locationId: [locationId, (0, schema_1.string)()],
                    order: [order, (0, schema_1.optional)((0, schema_1.string)())],
                    limit: [limit, (0, schema_1.optional)((0, schema_1.number)())],
                    batchToken: [batchToken, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.query('order', mapped.order);
                req.query('limit', mapped.limit);
                req.query('batch_token', mapped.batchToken);
                req.appendTemplatePath(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["/v1/", "/orders"], ["/v1/", "/orders"])), mapped.locationId);
                req.deprecated('V1TransactionsApi.v1ListOrders');
                return [2 /*return*/, req.callAsJson((0, schema_1.array)(v1Order_1.v1OrderSchema), requestOptions)];
            });
        });
    };
    /**
     * Provides comprehensive information for a single online store order, including the order's history.
     *
     * @param locationId  The ID of the order's associated location.
     * @param orderId     The order's Square-issued ID. You obtain this value from Order objects returned by
     *                              the List Orders endpoint
     * @return Response from the API call
     * @deprecated
     */
    V1TransactionsApi.prototype.v1RetrieveOrder = function (locationId, orderId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    locationId: [locationId, (0, schema_1.string)()],
                    orderId: [orderId, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["/v1/", "/orders/", ""], ["/v1/", "/orders/", ""])), mapped.locationId, mapped.orderId);
                req.deprecated('V1TransactionsApi.v1RetrieveOrder');
                return [2 /*return*/, req.callAsJson(v1Order_1.v1OrderSchema, requestOptions)];
            });
        });
    };
    /**
     * Updates the details of an online store order. Every update you perform on an order corresponds to
     * one of three actions:
     *
     * @param locationId   The ID of the order's associated location.
     * @param orderId      The order's Square-issued ID. You obtain this value from Order
     *                                                    objects returned by the List Orders endpoint
     * @param body         An object containing the fields to POST for the request.  See
     *                                                    the corresponding object definition for field details.
     * @return Response from the API call
     * @deprecated
     */
    V1TransactionsApi.prototype.v1UpdateOrder = function (locationId, orderId, body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PUT');
                mapped = req.prepareArgs({
                    locationId: [locationId, (0, schema_1.string)()],
                    orderId: [orderId, (0, schema_1.string)()],
                    body: [body, v1UpdateOrderRequest_1.v1UpdateOrderRequestSchema]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.appendTemplatePath(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject(["/v1/", "/orders/", ""], ["/v1/", "/orders/", ""])), mapped.locationId, mapped.orderId);
                req.deprecated('V1TransactionsApi.v1UpdateOrder');
                return [2 /*return*/, req.callAsJson(v1Order_1.v1OrderSchema, requestOptions)];
            });
        });
    };
    /**
     * Provides summary information for all payments taken for a given
     * Square account during a date range. Date ranges cannot exceed 1 year in
     * length. See Date ranges for details of inclusive and exclusive dates.
     *
     * *Note**: Details for payments processed with Square Point of Sale while
     * in offline mode may not be transmitted to Square for up to 72 hours.
     * Offline payments have a `created_at` value that reflects the time the
     * payment was originally processed, not the time it was subsequently
     * transmitted to Square. Consequently, the ListPayments endpoint might
     * list an offline payment chronologically between online payments that
     * were seen in a previous request.
     *
     * @param locationId      The ID of the location to list payments for. If you specify me, this endpoint
     *                                   returns payments aggregated from all of the business's locations.
     * @param order           The order in which payments are listed in the response.
     * @param beginTime       The beginning of the requested reporting period, in ISO 8601 format. If this
     *                                   value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an
     *                                   error. Default value: The current time minus one year.
     * @param endTime         The end of the requested reporting period, in ISO 8601 format. If this value is
     *                                   more than one year greater than begin_time, this endpoint returns an error.
     *                                   Default value: The current time.
     * @param limit           The maximum number of payments to return in a single response. This value
     *                                   cannot exceed 200.
     * @param batchToken      A pagination cursor to retrieve the next set of results for your original query
     *                                   to the endpoint.
     * @param includePartial  Indicates whether or not to include partial payments in the response. Partial
     *                                   payments will have the tenders collected so far, but the itemizations will be
     *                                   empty until the payment is completed.
     * @return Response from the API call
     * @deprecated
     */
    V1TransactionsApi.prototype.v1ListPayments = function (locationId, order, beginTime, endTime, limit, batchToken, includePartial, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    locationId: [locationId, (0, schema_1.string)()],
                    order: [order, (0, schema_1.optional)((0, schema_1.string)())],
                    beginTime: [beginTime, (0, schema_1.optional)((0, schema_1.string)())],
                    endTime: [endTime, (0, schema_1.optional)((0, schema_1.string)())],
                    limit: [limit, (0, schema_1.optional)((0, schema_1.number)())],
                    batchToken: [batchToken, (0, schema_1.optional)((0, schema_1.string)())],
                    includePartial: [includePartial, (0, schema_1.optional)((0, schema_1.boolean)())]
                });
                req.query('order', mapped.order);
                req.query('begin_time', mapped.beginTime);
                req.query('end_time', mapped.endTime);
                req.query('limit', mapped.limit);
                req.query('batch_token', mapped.batchToken);
                req.query('include_partial', mapped.includePartial);
                req.appendTemplatePath(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject(["/v1/", "/payments"], ["/v1/", "/payments"])), mapped.locationId);
                req.deprecated('V1TransactionsApi.v1ListPayments');
                return [2 /*return*/, req.callAsJson((0, schema_1.array)(v1Payment_1.v1PaymentSchema), requestOptions)];
            });
        });
    };
    /**
     * Provides comprehensive information for a single payment.
     *
     * @param locationId  The ID of the payment's associated location.
     * @param paymentId   The Square-issued payment ID. payment_id comes from Payment objects returned by the
     *                              List Payments endpoint, Settlement objects returned by the List Settlements endpoint,
     *                              or Refund objects returned by the List Refunds endpoint.
     * @return Response from the API call
     * @deprecated
     */
    V1TransactionsApi.prototype.v1RetrievePayment = function (locationId, paymentId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    locationId: [locationId, (0, schema_1.string)()],
                    paymentId: [paymentId, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_5 || (templateObject_5 = tslib_1.__makeTemplateObject(["/v1/", "/payments/", ""], ["/v1/", "/payments/", ""])), mapped.locationId, mapped.paymentId);
                req.deprecated('V1TransactionsApi.v1RetrievePayment');
                return [2 /*return*/, req.callAsJson(v1Payment_1.v1PaymentSchema, requestOptions)];
            });
        });
    };
    /**
     * Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff
     * during a date range. Date ranges cannot exceed one year in length.
     *
     * @param locationId  The ID of the location to list refunds for.
     * @param order       The order in which payments are listed in the response.
     * @param beginTime   The beginning of the requested reporting period, in ISO 8601 format. If this value
     *                              is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error.
     *                              Default value: The current time minus one year.
     * @param endTime     The end of the requested reporting period, in ISO 8601 format. If this value is more
     *                              than one year greater than begin_time, this endpoint returns an error. Default value:
     *                              The current time.
     * @param limit       The approximate number of refunds to return in a single response. Default: 100. Max:
     *                              200. Response may contain more results than the prescribed limit when refunds are
     *                              made simultaneously to multiple tenders in a payment or when refunds are generated in
     *                              an exchange to account for the value of returned goods.
     * @param batchToken  A pagination cursor to retrieve the next set of results for your original query to
     *                              the endpoint.
     * @return Response from the API call
     * @deprecated
     */
    V1TransactionsApi.prototype.v1ListRefunds = function (locationId, order, beginTime, endTime, limit, batchToken, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    locationId: [locationId, (0, schema_1.string)()],
                    order: [order, (0, schema_1.optional)((0, schema_1.string)())],
                    beginTime: [beginTime, (0, schema_1.optional)((0, schema_1.string)())],
                    endTime: [endTime, (0, schema_1.optional)((0, schema_1.string)())],
                    limit: [limit, (0, schema_1.optional)((0, schema_1.number)())],
                    batchToken: [batchToken, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.query('order', mapped.order);
                req.query('begin_time', mapped.beginTime);
                req.query('end_time', mapped.endTime);
                req.query('limit', mapped.limit);
                req.query('batch_token', mapped.batchToken);
                req.appendTemplatePath(templateObject_6 || (templateObject_6 = tslib_1.__makeTemplateObject(["/v1/", "/refunds"], ["/v1/", "/refunds"])), mapped.locationId);
                req.deprecated('V1TransactionsApi.v1ListRefunds');
                return [2 /*return*/, req.callAsJson((0, schema_1.array)(v1Refund_1.v1RefundSchema), requestOptions)];
            });
        });
    };
    /**
     * Issues a refund for a previously processed payment. You must issue
     * a refund within 60 days of the associated payment.
     *
     * You cannot issue a partial refund for a split tender payment. You must
     * instead issue a full or partial refund for a particular tender, by
     * providing the applicable tender id to the V1CreateRefund endpoint.
     * Issuing a full refund for a split tender payment refunds all tenders
     * associated with the payment.
     *
     * Issuing a refund for a card payment is not reversible. For development
     * purposes, you can create fake cash payments in Square Point of Sale and
     * refund them.
     *
     * @param locationId   The ID of the original payment's associated location.
     * @param body         An object containing the fields to POST for the request.  See
     *                                                     the corresponding object definition for field details.
     * @return Response from the API call
     * @deprecated
     */
    V1TransactionsApi.prototype.v1CreateRefund = function (locationId, body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST');
                mapped = req.prepareArgs({
                    locationId: [locationId, (0, schema_1.string)()],
                    body: [body, v1CreateRefundRequest_1.v1CreateRefundRequestSchema]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.appendTemplatePath(templateObject_7 || (templateObject_7 = tslib_1.__makeTemplateObject(["/v1/", "/refunds"], ["/v1/", "/refunds"])), mapped.locationId);
                req.deprecated('V1TransactionsApi.v1CreateRefund');
                return [2 /*return*/, req.callAsJson(v1Refund_1.v1RefundSchema, requestOptions)];
            });
        });
    };
    /**
     * Provides summary information for all deposits and withdrawals
     * initiated by Square to a linked bank account during a date range. Date
     * ranges cannot exceed one year in length.
     *
     * *Note**: the ListSettlements endpoint does not provide entry
     * information.
     *
     * @param locationId  The ID of the location to list settlements for. If you specify me, this endpoint
     *                              returns settlements aggregated from all of the business's locations.
     * @param order       The order in which settlements are listed in the response.
     * @param beginTime   The beginning of the requested reporting period, in ISO 8601 format. If this value
     *                              is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error.
     *                              Default value: The current time minus one year.
     * @param endTime     The end of the requested reporting period, in ISO 8601 format. If this value is more
     *                              than one year greater than begin_time, this endpoint returns an error. Default value:
     *                              The current time.
     * @param limit       The maximum number of settlements to return in a single response. This value cannot
     *                              exceed 200.
     * @param status      Provide this parameter to retrieve only settlements with a particular status (SENT
     *                              or FAILED).
     * @param batchToken  A pagination cursor to retrieve the next set of results for your original query to
     *                              the endpoint.
     * @return Response from the API call
     * @deprecated
     */
    V1TransactionsApi.prototype.v1ListSettlements = function (locationId, order, beginTime, endTime, limit, status, batchToken, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    locationId: [locationId, (0, schema_1.string)()],
                    order: [order, (0, schema_1.optional)((0, schema_1.string)())],
                    beginTime: [beginTime, (0, schema_1.optional)((0, schema_1.string)())],
                    endTime: [endTime, (0, schema_1.optional)((0, schema_1.string)())],
                    limit: [limit, (0, schema_1.optional)((0, schema_1.number)())],
                    status: [status, (0, schema_1.optional)((0, schema_1.string)())],
                    batchToken: [batchToken, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.query('order', mapped.order);
                req.query('begin_time', mapped.beginTime);
                req.query('end_time', mapped.endTime);
                req.query('limit', mapped.limit);
                req.query('status', mapped.status);
                req.query('batch_token', mapped.batchToken);
                req.appendTemplatePath(templateObject_8 || (templateObject_8 = tslib_1.__makeTemplateObject(["/v1/", "/settlements"], ["/v1/", "/settlements"])), mapped.locationId);
                req.deprecated('V1TransactionsApi.v1ListSettlements');
                return [2 /*return*/, req.callAsJson((0, schema_1.array)(v1Settlement_1.v1SettlementSchema), requestOptions)];
            });
        });
    };
    /**
     * Provides comprehensive information for a single settlement.
     *
     * The returned `Settlement` objects include an `entries` field that lists
     * the transactions that contribute to the settlement total. Most
     * settlement entries correspond to a payment payout, but settlement
     * entries are also generated for less common events, like refunds, manual
     * adjustments, or chargeback holds.
     *
     * Square initiates its regular deposits as indicated in the
     * [Deposit Options with Square](https://squareup.com/help/us/en/article/3807)
     * help article. Details for a regular deposit are usually not available
     * from Connect API endpoints before 10 p.m. PST the same day.
     *
     * Square does not know when an initiated settlement **completes**, only
     * whether it has failed. A completed settlement is typically reflected in
     * a bank account within 3 business days, but in exceptional cases it may
     * take longer.
     *
     * @param locationId    The ID of the settlements's associated location.
     * @param settlementId  The settlement's Square-issued ID. You obtain this value from Settlement objects
     *                                returned by the List Settlements endpoint.
     * @return Response from the API call
     * @deprecated
     */
    V1TransactionsApi.prototype.v1RetrieveSettlement = function (locationId, settlementId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    locationId: [locationId, (0, schema_1.string)()],
                    settlementId: [settlementId, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_9 || (templateObject_9 = tslib_1.__makeTemplateObject(["/v1/", "/settlements/", ""], ["/v1/", "/settlements/", ""])), mapped.locationId, mapped.settlementId);
                req.deprecated('V1TransactionsApi.v1RetrieveSettlement');
                return [2 /*return*/, req.callAsJson(v1Settlement_1.v1SettlementSchema, requestOptions)];
            });
        });
    };
    return V1TransactionsApi;
}(baseApi_1.BaseApi));
exports.V1TransactionsApi = V1TransactionsApi;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9;
//# sourceMappingURL=v1TransactionsApi.js.map