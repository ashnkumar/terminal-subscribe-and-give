import { array, boolean, lazy, nullable, object, optional, string, } from '../schema';
import { v1MoneySchema } from './v1Money';
import { v1PaymentSurchargeSchema, } from './v1PaymentSurcharge';
import { v1PaymentTaxSchema } from './v1PaymentTax';
export const v1RefundSchema = object({
    type: ['type', optional(string())],
    reason: ['reason', optional(nullable(string()))],
    refundedMoney: ['refunded_money', optional(lazy(() => v1MoneySchema))],
    refundedProcessingFeeMoney: [
        'refunded_processing_fee_money',
        optional(lazy(() => v1MoneySchema)),
    ],
    refundedTaxMoney: ['refunded_tax_money', optional(lazy(() => v1MoneySchema))],
    refundedAdditiveTaxMoney: [
        'refunded_additive_tax_money',
        optional(lazy(() => v1MoneySchema)),
    ],
    refundedAdditiveTax: [
        'refunded_additive_tax',
        optional(nullable(array(lazy(() => v1PaymentTaxSchema)))),
    ],
    refundedInclusiveTaxMoney: [
        'refunded_inclusive_tax_money',
        optional(lazy(() => v1MoneySchema)),
    ],
    refundedInclusiveTax: [
        'refunded_inclusive_tax',
        optional(nullable(array(lazy(() => v1PaymentTaxSchema)))),
    ],
    refundedTipMoney: ['refunded_tip_money', optional(lazy(() => v1MoneySchema))],
    refundedDiscountMoney: [
        'refunded_discount_money',
        optional(lazy(() => v1MoneySchema)),
    ],
    refundedSurchargeMoney: [
        'refunded_surcharge_money',
        optional(lazy(() => v1MoneySchema)),
    ],
    refundedSurcharges: [
        'refunded_surcharges',
        optional(nullable(array(lazy(() => v1PaymentSurchargeSchema)))),
    ],
    createdAt: ['created_at', optional(string())],
    processedAt: ['processed_at', optional(nullable(string()))],
    paymentId: ['payment_id', optional(nullable(string()))],
    merchantId: ['merchant_id', optional(nullable(string()))],
    isExchange: ['is_exchange', optional(nullable(boolean()))],
});
//# sourceMappingURL=v1Refund.js.map