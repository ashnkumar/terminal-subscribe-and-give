import { boolean, lazy, object, optional, Schema, string } from '../schema';
import { Address, addressSchema } from './address';
import {
  CashPaymentDetails,
  cashPaymentDetailsSchema,
} from './cashPaymentDetails';
import {
  ExternalPaymentDetails,
  externalPaymentDetailsSchema,
} from './externalPaymentDetails';
import { Money, moneySchema } from './money';

/**
 * Describes a request to create a payment using
 * [CreatePayment]($e/Payments/CreatePayment).
 */
export interface CreatePaymentRequest {
  /**
   * The ID for the source of funds for this payment.
   * This could be a payment token generated by the Web Payments SDK for any of its
   * [supported methods](https://developer.squareup.com/docs/web-payments/overview#explore-payment-methods),
   * including cards, bank transfers, Afterpay or Cash App Pay. If recording a payment
   * that the seller received outside of Square, specify either "CASH" or "EXTERNAL".
   * For more information, see
   * [Take Payments](https://developer.squareup.com/docs/payments-api/take-payments).
   */
  sourceId: string;
  /**
   * A unique string that identifies this `CreatePayment` request. Keys can be any valid string
   * but must be unique for every `CreatePayment` request.
   * Note: The number of allowed characters might be less than the stated maximum, if multi-byte
   * characters are used.
   * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
   */
  idempotencyKey: string;
  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  amountMoney?: Money;
  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  tipMoney?: Money;
  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  appFeeMoney?: Money;
  /**
   * The duration of time after the payment's creation when Square automatically
   * either completes or cancels the payment depending on the `delay_action` field value.
   * For more information, see
   * [Time threshold](https://developer.squareup.com/docs/payments-api/take-payments/card-payments/delayed-capture#time-threshold).
   * This parameter should be specified as a time duration, in RFC 3339 format.
   * Note: This feature is only supported for card payments. This parameter can only be set for a delayed
   * capture payment (`autocomplete=false`).
   * Default:
   * - Card-present payments: "PT36H" (36 hours) from the creation time.
   * - Card-not-present payments: "P7D" (7 days) from the creation time.
   */
  delayDuration?: string;
  /**
   * The action to be applied to the payment when the `delay_duration` has elapsed. The action must be
   * CANCEL or COMPLETE. For more information, see
   * [Time Threshold](https://developer.squareup.com/docs/payments-api/take-payments/card-payments/delayed-capture#time-threshold).
   * Default: CANCEL
   */
  delayAction?: string;
  /**
   * If set to `true`, this payment will be completed when possible. If
   * set to `false`, this payment is held in an approved state until either
   * explicitly completed (captured) or canceled (voided). For more information, see
   * [Delayed capture](https://developer.squareup.com/docs/payments-api/take-payments/card-payments#delayed-capture-of-a-card-payment).
   * Default: true
   */
  autocomplete?: boolean;
  /** Associates a previously created order with this payment. */
  orderId?: string;
  /**
   * The [Customer](entity:Customer) ID of the customer associated with the payment.
   * This is required if the `source_id` refers to a card on file created using the Cards API.
   */
  customerId?: string;
  /**
   * The location ID to associate with the payment. If not specified, the [main location](https://developer.squareup.com/docs/locations-api#about-the-main-location) is
   * used.
   */
  locationId?: string;
  /**
   * An optional [TeamMember](entity:TeamMember) ID to associate with
   * this payment.
   */
  teamMemberId?: string;
  /**
   * A user-defined ID to associate with the payment.
   * You can use this field to associate the payment to an entity in an external system
   * (for example, you might specify an order ID that is generated by a third-party shopping cart).
   */
  referenceId?: string;
  /**
   * An identifying token generated by [payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer).
   * Verification tokens encapsulate customer device information and 3-D Secure
   * challenge results to indicate that Square has verified the buyer identity.
   * For more information, see [SCA Overview](https://developer.squareup.com/docs/sca-overview).
   */
  verificationToken?: string;
  /**
   * If set to `true` and charging a Square Gift Card, a payment might be returned with
   * `amount_money` equal to less than what was requested. For example, a request for $20 when charging
   * a Square Gift Card with a balance of $5 results in an APPROVED payment of $5. You might choose
   * to prompt the buyer for an additional payment to cover the remainder or cancel the Gift Card
   * payment. This field cannot be `true` when `autocomplete = true`.
   * For more information, see
   * [Partial amount with Square Gift Cards](https://developer.squareup.com/docs/payments-api/take-payments#partial-payment-gift-card).
   * Default: false
   */
  acceptPartialAuthorization?: boolean;
  /** The buyer's email address. */
  buyerEmailAddress?: string;
  /**
   * Represents a postal address in a country.
   * For more information, see [Working with Addresses](https://developer.squareup.com/docs/build-basics/working-with-addresses).
   */
  billingAddress?: Address;
  /**
   * Represents a postal address in a country.
   * For more information, see [Working with Addresses](https://developer.squareup.com/docs/build-basics/working-with-addresses).
   */
  shippingAddress?: Address;
  /** An optional note to be entered by the developer when creating a payment. */
  note?: string;
  /**
   * Optional additional payment information to include on the customer's card statement
   * as part of the statement description. This can be, for example, an invoice number, ticket number,
   * or short description that uniquely identifies the purchase.
   * Note that the `statement_description_identifier` might get truncated on the statement description
   * to fit the required information including the Square identifier (SQ *) and name of the
   * seller taking the payment.
   */
  statementDescriptionIdentifier?: string;
  /**
   * Stores details about a cash payment. Contains only non-confidential information. For more information, see
   * [Take Cash Payments](https://developer.squareup.com/docs/payments-api/take-payments/cash-payments).
   */
  cashDetails?: CashPaymentDetails;
  /**
   * Stores details about an external payment. Contains only non-confidential information.
   * For more information, see
   * [Take External Payments](https://developer.squareup.com/docs/payments-api/take-payments/external-payments).
   */
  externalDetails?: ExternalPaymentDetails;
}

export const createPaymentRequestSchema: Schema<CreatePaymentRequest> = object({
  sourceId: ['source_id', string()],
  idempotencyKey: ['idempotency_key', string()],
  amountMoney: ['amount_money', optional(lazy(() => moneySchema))],
  tipMoney: ['tip_money', optional(lazy(() => moneySchema))],
  appFeeMoney: ['app_fee_money', optional(lazy(() => moneySchema))],
  delayDuration: ['delay_duration', optional(string())],
  delayAction: ['delay_action', optional(string())],
  autocomplete: ['autocomplete', optional(boolean())],
  orderId: ['order_id', optional(string())],
  customerId: ['customer_id', optional(string())],
  locationId: ['location_id', optional(string())],
  teamMemberId: ['team_member_id', optional(string())],
  referenceId: ['reference_id', optional(string())],
  verificationToken: ['verification_token', optional(string())],
  acceptPartialAuthorization: [
    'accept_partial_authorization',
    optional(boolean()),
  ],
  buyerEmailAddress: ['buyer_email_address', optional(string())],
  billingAddress: ['billing_address', optional(lazy(() => addressSchema))],
  shippingAddress: ['shipping_address', optional(lazy(() => addressSchema))],
  note: ['note', optional(string())],
  statementDescriptionIdentifier: [
    'statement_description_identifier',
    optional(string()),
  ],
  cashDetails: ['cash_details', optional(lazy(() => cashPaymentDetailsSchema))],
  externalDetails: [
    'external_details',
    optional(lazy(() => externalPaymentDetailsSchema)),
  ],
});
