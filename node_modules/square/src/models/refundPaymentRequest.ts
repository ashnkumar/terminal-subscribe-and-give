import {
  boolean,
  lazy,
  nullable,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { Money, moneySchema } from './money';

/** Describes a request to refund a payment using [RefundPayment]($e/Refunds/RefundPayment). */
export interface RefundPaymentRequest {
  /**
   * A unique string that identifies this `RefundPayment` request. The key can be any valid string
   * but must be unique for every `RefundPayment` request.
   * Keys are limited to a max of 45 characters - however, the number of allowed characters might be
   * less than 45, if multi-byte characters are used.
   * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
   */
  idempotencyKey: string;
  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  amountMoney: Money;
  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  appFeeMoney?: Money;
  /**
   * The unique ID of the payment being refunded.
   * Required when unlinked=false, otherwise must not be set.
   */
  paymentId?: string | null;
  /**
   * The ID indicating where funds will be refunded to, if this is an unlinked refund.
   * This can be any of the following: A token generated by Web Payments SDK;
   * a card-on-file identifier.
   * Required for requests specifying unlinked=true.
   * Otherwise, if included when `unlinked=false`, will throw an error.
   */
  destinationId?: string | null;
  /**
   * Indicates that the refund is not linked to a Square payment.
   * If set to true, `destination_id` and `location_id` must be supplied while `payment_id` must not
   * be provided.
   */
  unlinked?: boolean | null;
  /**
   * The location ID associated with the unlinked refund.
   * Required for requests specifying `unlinked=true`.
   * Otherwise, if included when `unlinked=false`, will throw an error.
   */
  locationId?: string | null;
  /**
   * The [Customer](entity:Customer) ID of the customer associated with the refund.
   * This is required if the `destination_id` refers to a card on file created using the Cards
   * API. Only allowed when `unlinked=true`.
   */
  customerId?: string | null;
  /** A description of the reason for the refund. */
  reason?: string | null;
  /**
   * Used for optimistic concurrency. This opaque token identifies the current `Payment`
   * version that the caller expects. If the server has a different version of the Payment,
   * the update fails and a response with a VERSION_MISMATCH error is returned.
   * If the versions match, or the field is not provided, the refund proceeds as normal.
   */
  paymentVersionToken?: string | null;
  /** An optional [TeamMember](entity:TeamMember) ID to associate with this refund. */
  teamMemberId?: string | null;
}

export const refundPaymentRequestSchema: Schema<RefundPaymentRequest> = object({
  idempotencyKey: ['idempotency_key', string()],
  amountMoney: ['amount_money', lazy(() => moneySchema)],
  appFeeMoney: ['app_fee_money', optional(lazy(() => moneySchema))],
  paymentId: ['payment_id', optional(nullable(string()))],
  destinationId: ['destination_id', optional(nullable(string()))],
  unlinked: ['unlinked', optional(nullable(boolean()))],
  locationId: ['location_id', optional(nullable(string()))],
  customerId: ['customer_id', optional(nullable(string()))],
  reason: ['reason', optional(nullable(string()))],
  paymentVersionToken: ['payment_version_token', optional(nullable(string()))],
  teamMemberId: ['team_member_id', optional(nullable(string()))],
});
