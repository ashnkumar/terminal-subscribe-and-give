import { ApiResponse, RequestOptions } from '../core';
import {
  ListMerchantsResponse,
  listMerchantsResponseSchema,
} from '../models/listMerchantsResponse';
import {
  RetrieveMerchantResponse,
  retrieveMerchantResponseSchema,
} from '../models/retrieveMerchantResponse';
import { number, optional, string } from '../schema';
import { BaseApi } from './baseApi';

export class MerchantsApi extends BaseApi {
  /**
   * Provides details about the merchant associated with a given access token.
   *
   * The access token used to connect your application to a Square seller is associated
   * with a single merchant. That means that `ListMerchants` returns a list
   * with a single `Merchant` object. You can specify your personal access token
   * to get your own merchant information or specify an OAuth token to get the
   * information for the merchant that granted your application access.
   *
   * If you know the merchant ID, you can also use the [RetrieveMerchant]($e/Merchants/RetrieveMerchant)
   * endpoint to retrieve the merchant information.
   *
   * @param cursor The cursor generated by the previous response.
   * @return Response from the API call
   */
  async listMerchants(
    cursor?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ListMerchantsResponse>> {
    const req = this.createRequest('GET', '/v2/merchants');
    const mapped = req.prepareArgs({ cursor: [cursor, optional(number())] });
    req.query('cursor', mapped.cursor);
    return req.callAsJson(listMerchantsResponseSchema, requestOptions);
  }

  /**
   * Retrieves the `Merchant` object for the given `merchant_id`.
   *
   * @param merchantId  The ID of the merchant to retrieve. If the string "me" is supplied as the ID, then
   *                              retrieve the merchant that is currently accessible to this call.
   * @return Response from the API call
   */
  async retrieveMerchant(
    merchantId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RetrieveMerchantResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ merchantId: [merchantId, string()] });
    req.appendTemplatePath`/v2/merchants/${mapped.merchantId}`;
    return req.callAsJson(retrieveMerchantResponseSchema, requestOptions);
  }
}
