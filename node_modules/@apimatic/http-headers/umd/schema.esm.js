function t(t,o,n){e(t,r(t,o),o,n)}function e(t,e,o,n){e&&delete t[e],n&&(t[o]=n)}function o(t,o,n){const c=r(t,o);c||e(t,c,o,n)}function n(t,e){const o=r(t,e);return o?t[o]:null}function r(t,e){e=e.toLowerCase();for(const o in t)if(Object.prototype.hasOwnProperty.call(t,o)&&e===o.toLowerCase())return o;return null}function c(t,e){const o={};for(const e of Object.getOwnPropertyNames(t))o[e.toLowerCase()]=e;for(const n of Object.getOwnPropertyNames(e)){const r=n.toLowerCase();o[r]&&delete t[o[r]],o[r]=n,t[n]=e[n]}}function a(t){if(null===t||"object"!=typeof t)throw new TypeError("Headers must be an object.");for(const e of Object.getOwnPropertyNames(t)){if(!i(e))throw new Error(`"${e}" is not a valid header name.`);const o=t[e];if("string"!=typeof o)throw new TypeError(`Header value must be string but ${typeof o} provided.`)}}function i(t){return/^[\w!#$%&'*+.^`|~-]+$/.test(t)}const s="content-type",f="accept",p="content-length",u="authorization",l="application/x-www-form-urlencoded",w="application/json",y="text/plain; charset=utf-8",d="application/xml";export{f as ACCEPT_HEADER,u as AUTHORIZATION_HEADER,p as CONTENT_LENGTH_HEADER,s as CONTENT_TYPE_HEADER,l as FORM_URLENCODED_CONTENT_TYPE,w as JSON_CONTENT_TYPE,y as TEXT_CONTENT_TYPE,d as XML_CONTENT_TYPE,a as assertHeaders,n as getHeader,i as isValidHeaderName,r as lookupCaseInsensitive,c as mergeHeaders,t as setHeader,o as setHeaderIfNotSet};
